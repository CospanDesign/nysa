import os
import sys
import json
import SCons

from string import Template


verilog_builder = Builder ( action = 'iverilog -o$TARGET -c$SOURCE -DSIMULATION -Wimplicit',
                            suffix = '.sim')
sim_builder = Builder     ( action = 'vvp $SOURCE', suffix='.vcd')
wave_builder = Builder    ( action = 'gtkwave design.vcd &')

env = Environment(ENV=os.environ,
                  BUILDERS={'verilog':verilog_builder,
                    'sim':sim_builder,
                    'wave':wave_builder})

env.Alias("sim", 'design.vcd')
env.Alias("wave", 'design.vcd', "gtkwave design.vcd &")
env.Alias("build", 'design.sim')


AlwaysBuild('design.sim')
AlwaysBuild('design.vcd')

def fix_verilog_paths():
  nysa_config = None
  path = os.path.expanduser('~')
  path = os.path.join(path, ".config", "nysa", "nysa.json")
  #The user should know about errors... or I should handle them gracefully o_0
  #Open the configuration file from the default location
  try:
    f = open(path)
    s = f.read()
    nysa_config = json.loads(s)
    f.close()
    #print "Opened up the configuration file"

  except IOError:
    print ("Error user has not set up configuration file, \
    run 'init_settings.py' in nysa base directory")

  #Open the user command file
  f = open('command_file.txt')
  template = Template(f.read())
  f.close()
  #print "Opened up the command file"

  #Apply the configuration directory
  buf = template.safe_substitute(
    NYSA=nysa_config["dir"]
  )

  #Write the output file
  #print "Opened up the temp file"
  f = open('temp.txt', 'w')
  f.write(buf)
  f.close()
  #print "Wrote the temp file"


print "Fixing verilog Paths..."
fix_verilog_paths()
env.verilog('design.sim', 'temp.txt')
env.sim('design.vcd', 'design.sim')

Default('design.sim')

Clean('design.sim', ['design.vcd', 'temp.txt'])


