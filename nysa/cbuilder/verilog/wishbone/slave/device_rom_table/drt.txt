Version 
	8/??/2011:  0.00.1	Initial DRT Version
	9/11/2011:  0.00.2	Proposed String functionality
	10/25/2011: 0.00.3	Added "mem flag" in the flags area to identify slaves on the memory bus
						modified the FLAGS: now bits 32:16 are only settable by the SAP script
	12/02/2011: 0.00.4	Changed the DRT size from 4 to 8 for the header and devices

Device Rom Table (DRT)

A wishbone slave that maps all the devices in the interconnect, essentially this is a ROM.

-This slave should be located at address 0 on the wishbone interconnect
-The controlling software should query this ROM in order to determine the devices and where they are located on the wishbone bus
-Initially designed for 32 bit words

Organization of the ROM 32 bit address location

0x00							DRT_VERSION (version number), DRT_ID (DRT ID)
	(Addr: 31-16)	: Version X.Y.ZZ
	(Addr: 15-0)	: DRT_ID (1EAF)
0x01							DRT_NUM_DEVICES (Number of devices attached)
0x02							STRING_OFFSET: (String Table: Offset for all the strings, that accompany all the slave and memory devices)
0x03							RFU
0x04							RFU
0x05							RFU
0x06							RFU
0x07							RFU

0x08:DEV_OFFSET	beginning of device offset (DRT_DEV_OFFSET)

DRT_DEV_OFFSET[x * 8] + 0:		Device ID (this is associated with the flags register bit 0 to indicate this is a standard device or not)
	(Addr: 31-0	)	: device ID number (see below)
DRT_DEV_OFFSET[x * 8] + 1:		FLAGS
		Note: bit 31:16 are set by saplib
	(Addr: 31-16)		: memory device (access this device in the memory bus)
							use commands with the flag MEMORY for read and write
	(Addr: 15-0 )		: standard device (can use generic drivers)
DRT_DEV_OFFSET[x * 8] + 2:		Offset from 0x00 	(NEED A NAME, not used yet)
DRT_DEV_OFFSET[x * 8] + 3:		Size of address space for device (NEED A NAME)
DRT_DEV_OFFSET[x * 8] + 4:		Size of address space for device (NEED A NAME)
DRT_DEV_OFFSET[x * 8] + 5:		Size of address space for device (NEED A NAME)
DRT_DEV_OFFSET[x * 8] + 6:		Size of address space for device (NEED A NAME)
DRT_DEV_OFFSET[x * 8] + 7:		Size of address space for device (NEED A NAME)



THIS IS NOT BY ANY MEANS FINAL, BUT MAKING DEVICE IDENTIFICATION NUMBER
0000	: Nothing
0001	: GPIO
0002	: UART
0003	: I2C
0004	: SPI
0005	: Memory
0006	: Console
0007	: FSMC
0008	: LEDs
0009	: Buttons
000A	: Frame Buffer
000B  : I2S
000C  : Logic Analyzer


Strings (Tentative)

The slave devices can contain strings that will identify the slave, registers, and flags
SLAVE_OFFSET + 0 				size (in bytes) of the string table 
SLAVE_OFFSET + 1 				number of strings in the string table
SLAVE_OFFSET + X[0]				data entry

	X + 0

		first word:
		(Addr: 31:24) 	: (S_SIZE) Size in bytes of the string
		(Addr: 23:16) 	: Flags
							23: Memory
							22: Slave
							21: ??
							20: ??
							19: ??
							18: Flag
							17: Register
							16: Name
		(Addr: 15:8) 	: Device Index (Either slave index or memory index)
		(Addr: 7:0) 	: Optional (If Register, register index, if flag, flag bit index)

	X + 1 - X + 1 + S_SIZE 		: Actual string 

SLAVE_OFFSET + X[1] = SLAVE_OFFSET + X[0] + 1 + S_SIZE : Next entry

