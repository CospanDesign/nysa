###############################################################################
# Copyright (c) 2013 Potential Ventures Ltd
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Potential Ventures Ltd nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL POTENTIAL VENTURES LTD BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############################################################################

ifeq ($(SIM_BUILD_ROOT),)
SIM_BUILD := sim_build
else
SIM_BUILD := $(SIM_BUILD_ROOT)
endif

VPI_LIB := vpi

ifeq ($(ARCH),x86_64)
EXTRA_ARGS += -full64
endif

sim:
	-@rm -rf results.xml
	$(MAKE) results.xml

$(SIM_BUILD):
	mkdir -p $(SIM_BUILD)

# TODO:
# investigate +vpi+1 option which reduces memory requirements

# Can't do this using an argument, we have to create a PLI table file
# enabling write access to the design
$(SIM_BUILD)/pli.tab :
	echo "acc+=rw,wn:*" > $@

.PHONY: regression sim

regression: build_simv results.xml

MODULE_FILES:=$(shell for X in $(echo "test1,test2" | sed 's/,/ /g'); do echo $X.py; done)
PYTHON_FILES:=$(shell find $(SIM_ROOT)/cocotb/ -name "*.py" | xargs) $(MODULE_FILES)

results.xml: $(SIM_BUILD)/simv $(PYTHON_FILES) $(CUSTOM_DEPS)
	-PYTHONPATH=$(LIB_DIR):$(SIM_ROOT):$(PWD):$(PYTHONPATH) LD_LIBRARY_PATH=$(LIB_DIR) MODULE=$(MODULE) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) \
        $(SIM_BUILD)/simv +define+COCOTB_SIM=1 $(SIM_ARGS) $(EXTRA_ARGS)

gdb: $(SIM_BUILD)/simv $(PYTHON_FILES)
	-PYTHONPATH=$(LIB_DIR):$(SIM_ROOT):$(PWD):$(PYTHONPATH) LD_LIBRARY_PATH=$(LIB_DIR) MODULE=$(MODULE) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) \
		gdb --args $(SIM_BUILD)/simv +define+COCOTB_SIM=1 $(EXTRA_ARGS)

dve: $(SIM_BUILD)/simv_dve
	PYTHONPATH=$(LIB_DIR):$(SIM_ROOT):$(PWD):$(PYTHONPATH) LD_LIBRARY_PATH=$(LIB_DIR) MODULE=$(MODULE) TESTCASE=$(TESTCASE) TOPLEVEL=$(TOPLEVEL) \
		vcs +acc+1 +vpi+1+assertion -P pli.tab +define+COCOTB_SIM=1 -sverilog $(EXTRA_ARGS) -gui -load libgpi.so $(COMPILE_ARGS) $(VERILOG_SOURCES)

.PHONY: build_simv
build_simv: $(SIM_BUILD)/simv

$(SIM_BUILD)/simv: $(SIM_BUILD) $(VERILOG_SOURCES) $(SIM_BUILD)/pli.tab libs_native
	cd $(SIM_BUILD) && \
    LD_LIBRARY_PATH=$(LIB_DIR) TOPLEVEL=$(TOPLEVEL) \
    vcs +acc+1 +vpi -P pli.tab +define+COCOTB_SIM=1 -sverilog $(EXTRA_ARGS) -debug -load libgpi.so $(COMPILE_ARGS) $(VERILOG_SOURCES)

.PHONY: clean
clean::
	-@rm -rf $(SIM_BUILD)
	-@rm -rf simv.daidir
	-@rm -rf cm.log
	-@rm -rf results.xml
	-@rm -rf ucli.key
